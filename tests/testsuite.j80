
.asciiz testintro "Test "
.asciiz success "success"
.asciiz fail "fail"
.asciiz test_sf "SF R"
.asciiz test_lf "LF R"
.asciiz test_sext "SEXT R"
.asciiz test_cmp_r_s "CMP R, S"

.asciiz test_add_nn "ADD NN"
.asciiz test_add_nnnn "ADD NNNN"
.asciiz test_ld_nn "LD NN"
.asciiz test_ld_nnnn "LD NNNN"
.asciiz test_lsh_r8 "LSH R8"
.asciiz test_lsh_r16 "LSH R16"
.asciiz test_st_pp "ST [PP+SS], R"
.asciiz test_ld_pp "LD R, [PP+SS]"
.asciiz test_recursion "Recursion"

.const stdout ffffh

LD SP, 8000h

CALL cmp_r_s
CALL sext_r
CALL sf_r
CALL lf_r
CALL add_nn
CALL add_nnnn
CALL ld_r_pp_test
CALL st_pp_r_test
CALL ld_nn_test
CALL ld_nnnn_test
CALL lsh_r_test
CALL lsh_rr_test

end:
JMP end

# prints decimal number
# X (in): value to be printed
printDecimal:
LD Y, 0
LD A, X
printDecimal3:
CMP A, 100
JMPV printDecimal2
ADD Y, 1
SUB A, 100
JMP printDecimal3
printDecimal2:
ADD Y, '0'
ST [FFFFh], Y
LD Y, 0
printDecimal4:
CMP A, 10
JMPV printDecimal5
ADD Y, 1
SUB A, 10
JMP printDecimal4
printDecimal5:
ADD Y, '0'
ST [stdout], Y
ADD A, '0'
ST [stdout], A
RET

# prints string
# BA (in): pointer to data
printString:
LD Y, [BA]
CMP Y, 0
RETZ
ST [stdout], Y
ADD BA, 1
JMP printString

# print test result
# C (in): which test
# X (in): test name length
# BA (in): test name address
# Y (in): 0 if fail, otherwise success
printTestResult:
PUSH BA
PUSH Y
PUSH C
LD BA, testintro
CALL printString
POP C
POP Y
POP BA
PUSH Y
CALL printString
LD X, ':'
ST [stdout], X
LD X, ' '
ST [stdout], X
POP Y
CMP Y
JMPZ printTestResult2
LD BA, success
CALL printString
LD X, 0Ah
ST [stdout], X
RET
printTestResult2:
LD BA, fail
CALL printString
LD X, ' '
ST [stdout], X
LD X, '('
ST [stdout], X
LD X, C
CALL printDecimal
LD X, ')'
ST [stdout], X
LD X, 0Ah
ST [stdout], X
RET

# test LSH R8
lsh_r_test:
LD X, 1

LSH X
CMP X, 2

LD C, 1
JMPNZ lsh_r_test_fail

LSH X
CMP X, 4

LD C, 2
JMPNZ lsh_r_test_fail

LSH X
CMP X, 8

LD C, 3
JMPNZ lsh_r_test_fail

# zero flag set after shifting back to zero
LD X, 80h
LSH X

LD C, 4
JMPNZ lsh_r_test_fail

# zero flag clear after shifting not to zero
LD X, 40h
LSH X

LD C, 5
JMPZ lsh_r_test_fail

# carry flag set after shifting a 1 outside
LD X, FFh
LSH X

LD C, 6
JMPNC lsh_r_test_fail

# carry flag reset after shifting a 0 outside
LD X, 40h
LSH X
LD C, 7
JMPC lsh_r_test_fail

# sign flag set after shifting 1 to last bit
LD C, 8
JMPNN lsh_r_test_fail

#sign flag reset after shifting 0 to last bit
LD X, 20h
LSH X

LD C, 9
JMPN lsh_r_test_fail



LD Y, 1
LD BA, test_lsh_r8
CALL printTestResult
RET

lsh_r_test_fail:
LD Y, 0
LD BA, test_lsh_r8
CALL printTestResult
RET


# test LSH R16
lsh_rr_test:
LD BA, 1

LSH BA
CMP BA, 2

LD C, 1
JMPNZ lsh_r_test_fail

LSH BA
CMP BA, 4

LD C, 2
JMPNZ lsh_r_test_fail

LSH BA
CMP BA, 8

LD C, 3
JMPNZ lsh_r_test_fail

LD BA, 100h
LSH BA
CMP BA, 200h
LD C, 4
JMPNZ lsh_r_test_fail


# zero flag set after shifting back to zero
LD BA, 8000h
LSH BA

LD C, 5
JMPNZ lsh_r_test_fail

# zero flag clear after shifting not to zero
LD BA, 4000h
LSH BA

LD C, 6
JMPZ lsh_r_test_fail

# carry flag set after shifting a 1 outside
LD BA, FFFFh
LSH BA

LD C, 7
JMPNC lsh_r_test_fail

# carry flag reset after shifting a 0 outside
LD BA, 4000h
LSH BA
LD C, 8
JMPC lsh_r_test_fail

# sign flag set after shifting 1 to last bit
LD C, 9
# TODO
JMPNN lsh_r_test_fail

#sign flag reset after shifting 0 to last bit
LD BA, 2000h
LSH BA

LD C, 9
JMPN lsh_rr_test_fail



LD Y, 1
LD BA, test_lsh_r16
CALL printTestResult
RET

lsh_rr_test_fail:
LD Y, 0
LD BA, test_lsh_r16
CALL printTestResult
RET


# test LD R, NN
ld_nn_test:
LD A, 10
CMP A, 10
LD C, 1
JMPNZ ld_nn_test_fail

LD B, 11
CMP B, 11
LD C, 2
JMPNZ ld_nn_test_fail

LD X, 12
CMP X, 12
LD C, 3
JMPNZ ld_nn_test_fail

LD Y, 13
CMP Y, 13
LD C, 4
JMPNZ ld_nn_test_fail

LD C, 14
CMP C, 14
LD C, 5
JMPNZ ld_nn_test_fail

LD D, 15
CMP D, 15
LD C, 6
JMPNZ ld_nn_test_fail

LD E, 16
CMP E, 16
LD C, 7
JMPNZ ld_nn_test_fail

LD F, 17
CMP F, 17
LD C, 8
JMPNZ ld_nn_test_fail


LD Y, 1
LD BA, test_ld_nn
CALL printTestResult
RET
ld_nn_test_fail:
LD Y, 0
LD BA, test_ld_nn
CALL printTestResult
RET




# test LD P, NNNN
ld_nnnn_test:

LD BA, 1234h
CMP BA, 1234h
LD C, 1
JMPNZ ld_nnnn_test_fail

LD CD, 3456h
CMP CD, 3456h
LD C, 2
JMPNZ ld_nnnn_test_fail

LD XY, 5678h
CMP XY, 5678h
LD C, 3
JMPNZ ld_nnnn_test_fail

LD EF, 789Ah
CMP EF, 789Ah
LD C, 4
JMPNZ ld_nnnn_test_fail

LD FP, 9ABCh
CMP FP, 9ABCh
LD C, 5
JMPNZ ld_nnnn_test_fail

LD IX, BCDEh
CMP IX, BCDEh
LD C, 6
JMPNZ ld_nnnn_test_fail

LD IY, DE12h
CMP IY, DE12h
LD C, 7
JMPNZ ld_nnnn_test_fail

LD BA, SP
LD SP, 6512h
CMP SP, 6512h
LD SP, BA
LD C, 8
JMPNZ ld_nnnn_test_fail

LD Y, 1
ld_nnnn_test_end:
LD BA, test_ld_nnnn
CALL printTestResult
RET
ld_nnnn_test_fail:
LD Y, 0
JMP ld_nnnn_test_end

# test ST [PP+SS], R
st_pp_r_test:

LD BA, 2000h

LD X, 10
ST [BA], X
LD Y, [2000h]
CMP X, Y
LD C, 1
JMPNZ st_pp_r_test_fail

LD X, 15
ST [BA-1], X
LD Y, [1FFFh]
CMP X, Y
LD C, 2
JMPNZ st_pp_r_test_fail

LD X, 20
ST [BA+1], X
LD Y, [2001h]
CMP X, Y
LD C, 3
JMPNZ st_pp_r_test_fail

LD Y, 1
st_pp_r_test_end:
LD BA, test_st_pp
CALL printTestResult
RET
st_pp_r_test_fail:
LD Y, 0
JMP st_pp_r_test_end

# test LD R, [PP+SS]
ld_r_pp_test:

LD BA, 2000h

LD X, 10
ST [2010h], X
LD Y, [BA+16]
CMP X, Y
LD C, 1
JMPNZ ld_r_pp_test_fail

LD X, 16
ST [2000h], X
LD Y, [BA]
CMP X, Y
LD C, 2
JMPNZ ld_r_pp_test_fail

LD X, 20
ST [1FF6h], X # 2000h - 10
LD Y, [BA-10]
CMP X, Y
LD C, 3
JMPNZ ld_r_pp_test_fail

LD Y, 1
ld_r_pp_test_end:
LD BA, test_ld_pp
CALL printTestResult
RET
ld_r_pp_test_fail:
LD Y, 0
JMP ld_r_pp_test_end


#test ADD NN
add_nn:

# x = 10, x += 5, assert(!carry && x == 15)
LD X, 10
ADD X, 5
LD C, 0
JMPC add_nn_test_fail
CMP X, 15
JMPNZ add_nn_test_fail

# x = 100, x += 200, assert(carry && x == 0x2C)
LD X, 100
ADD X, 200
LD C, 1
JMPNC add_nn_test_fail
CMP X, 2Ch
JMPNZ add_nn_test_fail

# x = 10 x += -10, assert(x == 90)
LD X, 100
ADD X, -10
LD C, 2
CMP X, 90
JMPNZ add_nn_test_fail

# x = 120, x += 10, assert(overflow)
LD X, 120
ADD X, 10
LD C, 3
JMPNV add_nn_test_fail

# x = -120, x += -10, assert(overflow)
#FIX
LD X, -120
ADD X, -150
LD C, 4
JMPNV add_nn_test_fail

LD Y, 1
add_nn_test_end:
LD BA, test_add_nn
CALL printTestResult
RET
add_nn_test_fail:
LD Y, 0
JMP add_nn_test_end

#test ADD NNNN
add_nnnn:

# x = 1000, x += 500, assert(!carry && x == 15)
LD XY, 1000
ADD XY, 500
LD C, 0
JMPC add_nnnn_test_fail
CMP XY, 1500
JMPNZ add_nnnn_test_fail

# x = 40000, x += 40000, assert(carry && x == 0x2C)
LD XY, 40000
ADD XY, 40000
LD C, 1
JMPNC add_nnnn_test_fail
CMP XY, 3880h
JMPNZ add_nnnn_test_fail

# x = 1000 x += -100, assert(x == 900)
LD XY, 1000
ADD XY, -100
LD C, 2
CMP XY, 900
JMPNZ add_nnnn_test_fail

# x = 30000, x += 10000, assert(overflow)
LD XY, 30000
ADD XY, 10000
LD C, 3
JMPNV add_nnnn_test_fail

# x = -120, x += -10, assert(overflow)
LD XY, -30000
ADD XY, -10000
LD C, 4
JMPNV add_nnnn_test_fail

LD Y, 1
add_nnnn_test_end:
LD BA, test_add_nnnn
CALL printTestResult
RET
add_nnnn_test_fail:
LD Y, 0
JMP add_nnnn_test_end

##############################
# LF R
##############################
lf_r:
# FLAGS <- 0 all flags must be 0
LD X, 0
LF X
LD C, 0
JMPC lf_r_test_fail
JMPZ lf_r_test_fail
JMPN lf_r_test_fail
JMPV lf_r_test_fail

# FLAGS <- 1 just carry set
LD X, 1
LF X
LD C, 1
JMPNC lf_r_test_fail
JMPZ lf_r_test_fail
JMPN lf_r_test_fail
JMPV lf_r_test_fail

# FLAGS <- 2 just zero set
LD X, 2
LF X
LD C, 2
JMPC lf_r_test_fail
JMPNZ lf_r_test_fail
JMPN lf_r_test_fail
JMPV lf_r_test_fail

# FLAGS <- 4 just sign set
LD X, 4
LF X
LD C, 3
JMPC lf_r_test_fail
JMPZ lf_r_test_fail
JMPNN lf_r_test_fail
JMPV lf_r_test_fail

# FLAGS <- 8 just sign set
LD X, 8
LF X
LD C, 4
JMPC lf_r_test_fail
JMPZ lf_r_test_fail
JMPN lf_r_test_fail
JMPNV lf_r_test_fail

LD Y, 1
lf_r_test_end:
LD BA, test_lf
CALL printTestResult
RET
lf_r_test_fail:
LD Y, 0
JMP lf_r_test_end


##############################
# SF R
##############################
sf_r:
LD X, 0
sf_r_loop:
# test values [0x00, 0x0F] by saving them into flags, loading them and then check equality
# for (byte i = 0; i < 16; ++i)
#   loadFlags(i);
#   y = storeFlags(i);
#   if (i != y) testFail()
CMP X, 16
JMPZ sf_r_loop_end
LF X
SF Y
CMP X, Y
JMPNZ sf_r_test_fail
ADD X, 1
JMP sf_r_loop

sf_r_loop_end:
LD Y, 1
sf_r_test_end:
LD BA, test_sf
CALL printTestResult
RET
sf_r_test_fail:
LD Y, 0
JMP sf_r_test_end

##############################
# SEXT R
##############################
sext_r:

LD A, -1
SEXT A
CMP BA, -1
LD C, 0
JMPNZ sext_r_test_fail
LD D, 0
SEXT D
CMP CD, 0
LD C, 1
JMPNZ sext_r_test_fail
LD F, 50
SEXT F
CMP EF, 50
LD C, 2
JMPNZ sext_r_test_fail
LD Y, -30
SEXT Y
CMP XY, -30
LD C, 3
JMPNZ sext_r_test_fail

LD Y, 1
sext_r_test_end:
LD BA, test_sext
CALL printTestResult
RET
sext_r_test_fail:
LD Y, 0
JMP sext_r_test_end

##############################
# CMP R, S
##############################
#FLAGS: 
.bytes cmp_r_s_operand_a [ 1, 5, 4 ]
.bytes cmp_r_s_operand_b [ 1, 4, 5 ]
.bytes cmp_r_s_expected_flags [ 2h, 0h, 1h ]

cmp_r_s:
LD CD, 0
CMP CD, length(cmp_r_s_operand_a)
JMPZ cmp_r_s_test_success
LD IX, cmp_r_s_operand_a
ADD IX, CD
LD IY, cmp_r_s_operand_b
ADD IY, CD
LD EF, cmp_r_s_expected_flags
ADD EF, CD
LD E, [EF]
LD A, [IX]
LD B, [IY]
CMP A, B
SF F
CMP E, F
LD C, D
JMPNZ cmp_r_s_fail

cmp_r_s_test_success:
LD Y, 1
cmp_r_s_end:
LD BA, test_cmp_r_s
CALL printTestResult
RET
cmp_r_s_fail:
LD Y, 0
JMP cmp_r_s_end



